import os
from datetime import datetime
from dateutil.relativedelta import relativedelta

def build_month_suffix(month_offset=0):
    """Return MMYY string like '0425' for current or prior month"""
    target_date = datetime.now() + relativedelta(months=month_offset)
    return target_date.strftime("%m%y")

def find_matching_excel_files(folder_path, base_names, month_suffix):
    """Find exact matching Excel files for each base name + month suffix"""
    matches = {}

    for base_name in base_names:
        target_filename = f"{base_name} {month_suffix}".lower()
        matches[base_name] = []

        for file in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file)
            if not os.path.isfile(file_path):
                continue

            file_name, file_ext = os.path.splitext(file)
            if file_ext.lower() not in ['.xlsx', '.xls', '.xlsm']:
                continue

            if file_name.strip().lower() == target_filename:
                matches[base_name].append(file_path)

    return matches

# === Templates you want to check ===
template_prefixes = [
    "Wholesale Banking Segment EOC",
    "Consumer Banking Segment EOC",
    "Enterprise Operational Services EOC",
    "Enterprise Technology & Butterfly EOC",
    "Enterprise Corporate Services EOC",
    "Deposit Administration EOC",
    "04 2025 General Accounting EOC",  # Special case (can update later to dynamic)
    "BB&T Assurance EOC",
    "Foreclosed Properties EOC EOC",   # Typo in file name? Keep if needed
]

# === Paths and Setup ===
folder = r"C:\path\to\your\folder"  # Replace this with your real folder path

# === Search Current and Prior Month ===
suffix_current = build_month_suffix(0)
suffix_prior = build_month_suffix(-1)

print(f"Looking for files ending in: {suffix_current} (Current Month)")
current_results = find_matching_excel_files(folder, template_prefixes, suffix_current)

print(f"\nLooking for files ending in: {suffix_prior} (Prior Month)")
prior_results = find_matching_excel_files(folder, template_prefixes, suffix_prior)

# === Output Results ===
def print_results(title, results):
    print(f"\n=== {title} ===")
    for key, paths in results.items():
        if paths:
            for path in paths:
                print(f"{key}: {path}")
        else:
            print(f"{key}: Not found")

print_results("Current Month Files", current_results)
print_results("Prior Month Files", prior_results)