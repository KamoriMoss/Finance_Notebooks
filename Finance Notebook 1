import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

class StockInfo:
    def __init__(self, ticker):
        """Initialize the StockInfo class with a stock ticker."""
        self.ticker = ticker
        self.stock = yf.Ticker(ticker)

    def get_historical_data(self, period="6mo", interval="1d"):
        """Fetch historical stock data."""
        return self.stock.history(period=period, interval=interval)

    def get_moving_averages(self, window=50):
        """Calculate Simple and Exponential Moving Averages."""
        data = self.get_historical_data()["Close"]
        sma = data.rolling(window=window).mean()
        ema = data.ewm(span=window, adjust=False).mean()
        return sma, ema

    def get_rsi(self, period=14):
        """Calculate the Relative Strength Index (RSI)."""
        data = self.get_historical_data()["Close"]
        delta = data.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def get_drawdown(self):
        """Calculate Drawdown for the stock."""
        data = self.get_historical_data()["Close"]
        peak = data.cummax()
        drawdown = (data - peak) / peak
        return drawdown

    def plot_stock_data(self):
        """Plot stock price with moving averages, RSI, returns histogram, and drawdowns."""
        data = self.get_historical_data()
        close_prices = data["Close"]
        sma, ema = self.get_moving_averages()
        rsi = self.get_rsi()
        drawdown = self.get_drawdown()
        
        # Create figure with 3 subplots
        fig, axes = plt.subplots(3, 1, figsize=(12, 12), gridspec_kw={'height_ratios': [3, 1, 1]})
        
        # Price Chart with Moving Averages
        axes[0].plot(close_prices, label="Closing Price", color="blue", alpha=0.7)
        axes[0].plot(sma, label="50-Day SMA", linestyle="dashed", color="orange")
        axes[0].plot(ema, label="50-Day EMA", linestyle="dashed", color="green")
        axes[0].set_title(f"{self.ticker} Stock Price & Moving Averages")
        axes[0].legend()
        axes[0].set_ylabel("Price")
        
        # RSI Chart
        axes[1].plot(rsi, label="RSI", color="purple")
        axes[1].axhline(70, linestyle="dashed", color="red", alpha=0.7)  # Overbought
        axes[1].axhline(30, linestyle="dashed", color="green", alpha=0.7)  # Oversold
        axes[1].set_title("Relative Strength Index (RSI)")
        axes[1].set_ylabel("RSI")
        axes[1].legend()
        
        # Drawdown Chart
        axes[2].plot(drawdown, label="Drawdown", color="red")
        axes[2].set_title("Stock Drawdowns")
        axes[2].set_ylabel("Drawdown (%)")
        axes[2].legend()
        
        plt.tight_layout()
        plt.show()

# Example Usage:
if __name__ == "__main__":
    stock = StockInfo("AAPL")
    stock.plot_stock_data()

